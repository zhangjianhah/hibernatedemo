<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 配置service扫描 -->
    <!-- <context:component-scan base-package="com.zj.mavenssm.service" /> -->
    <!-- 事务管理要求spring有管理所有bean的权力，而springmvc是管理控制层的，只要扫描controller就好 -->
    <context:component-scan base-package="com.zj.hibernatedemo" />

    <!--事务的配置，基于aspectj的aop-->
    <!-- 配置事务管理器 -->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--    </bean>-->



    <!-- 配置事务通知 -->
<!--    <tx:advice id="myAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;代表一种方法类型; 指定name->代表方法的名称; 方法名以save开头的,应用required的策略(必须要事务)&ndash;&gt;-->
<!--            <tx:method name="save*" propagation="REQUIRED"/>-->
<!--            <tx:method name="add*" propagation="REQUIRED" />-->
<!--            <tx:method name="insert*" propagation="REQUIRED" />-->
<!--            <tx:method name="update*" propagation="REQUIRED" />-->
<!--            <tx:method name="modify*" propagation="REQUIRED" />-->
<!--            <tx:method name="edit*" propagation="REQUIRED" />-->
<!--            <tx:method name="delete*" propagation="REQUIRED" />-->
<!--            <tx:method name="remove*" propagation="REQUIRED" />-->

<!--            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
<!--            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
<!--            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>-->

<!--            <tx:method name="*" propagation="SUPPORTS" />-->

<!--        </tx:attributes>-->
<!--    </tx:advice>-->

    <!-- 配置顾问和切入点 -->
<!--    <aop:config>-->
<!--        &lt;!&ndash;切入点&ndash;&gt;-->
<!--&lt;!&ndash;        <aop:pointcut id="myPointcut" expression="execution(* com.zj.hibernatedemo.service.*.*(..))"/>&ndash;&gt;-->
<!--        <aop:pointcut id="myPointcut" expression="execution(* com.zj.hibernatedemo.dao..*.*(..))"/>-->

<!--        &lt;!&ndash;顾问给xx提供一个意见(通知单)&ndash;&gt;-->
<!--        <aop:advisor  pointcut-ref="myPointcut" advice-ref="myAdvice"/>-->
<!--    </aop:config>-->

    <!--

    所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如，A 事务中的方法 a() 调用 B 事务中的方法 b()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。
    REQUIRED：指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。
    SUPPORTS：指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。
    MANDATORY：指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。
    REQUIRES_NEW：总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。
    NOT_SUPPORTED：指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。
    NEVER：指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。
    NESTED：指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。

    -->

    <!-- 注解方式配置事务 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>